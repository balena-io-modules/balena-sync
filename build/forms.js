// Generated by CoffeeScript 1.12.7
var Docker, Promise, SpinnerPromise, _, discoverLocalBalenaOsDevices, dockerPort, dockerTimeout, form, ref;

Promise = require('bluebird');

_ = require('lodash');

Docker = require('docker-toolbelt');

form = require('resin-cli-form');

discoverLocalBalenaOsDevices = require('./discover').discoverLocalBalenaOsDevices;

SpinnerPromise = require('resin-cli-visuals').SpinnerPromise;

ref = require('./config'), dockerPort = ref.dockerPort, dockerTimeout = ref.dockerTimeout;

exports.selectSyncDestination = function(preferredDestination) {
  return form.run([
    {
      message: 'Destination directory on device container [/usr/src/app]',
      name: 'destination',
      type: 'input'
    }
  ], {
    override: {
      destination: preferredDestination
    }
  }).get('destination').then(function(destination) {
    return destination != null ? destination : '/usr/src/app';
  });
};

exports.selectLocalBalenaOsDevice = function(timeout) {
  if (timeout == null) {
    timeout = 4000;
  }
  return new SpinnerPromise({
    promise: discoverLocalBalenaOsDevices(timeout),
    startMessage: 'Discovering local balenaOS devices..',
    stopMessage: 'Reporting discovered devices'
  }).filter(function(arg) {
    var address;
    address = (arg != null ? arg : {}).address;
    if (!address) {
      return false;
    }
    return Promise["try"](function() {
      var docker;
      docker = new Docker({
        host: address,
        port: dockerPort,
        timeout: dockerTimeout
      });
      return docker.pingAsync();
    })["return"](true).catchReturn(false);
  }).then(function(devices) {
    if (_.isEmpty(devices)) {
      throw new Error('Could not find any local balenaOS devices');
    }
    return form.ask({
      message: 'select a device',
      type: 'list',
      "default": devices[0].ip,
      choices: _.map(devices, function(device) {
        return {
          name: (device.host || 'untitled') + " (" + device.address + ")",
          value: device.address
        };
      })
    });
  });
};
